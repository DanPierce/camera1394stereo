#! /usr/bin/env python
#*
#*  Copyright (c) 2010, Jack O'Quin
#*  All rights reserved.
#*
#*  Redistribution and use in source and binary forms, with or without
#*  modification, are permitted provided that the following conditions
#*  are met:
#*
#*   * Redistributions of source code must retain the above copyright
#*     notice, this list of conditions and the following disclaimer.
#*   * Redistributions in binary form must reproduce the above
#*     copyright notice, this list of conditions and the following
#*     disclaimer in the documentation and/or other materials provided
#*     with the distribution.
#*   * Neither the name of the author nor the names of other
#*     contributors may be used to endorse or promote products derived
#*     from this software without specific prior written permission.
#*
#*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
#*  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
#*  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
#*  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
#*  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
#*  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
#*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
#*  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
#*  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
#*  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
#*  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#*  POSSIBILITY OF SUCH DAMAGE.
#***********************************************************

# 1394stereo camera dynamic configuration

PACKAGE='camera1394stereo'
import roslib; roslib.load_manifest(PACKAGE)

from dynamic_reconfigure.parameter_generator import *
from driver_base.msg import SensorLevels


gen = ParameterGenerator()

#       Name, Type, Reconfiguration level, Description, Default, Min, Max

gen.add("guid", str_t, SensorLevels.RECONFIGURE_CLOSE,
        "Global Unique ID of camera, 16 hex digits (use first camera if null).",
        "")

# commented out modes not working yet
video_modes = gen.enum([gen.const("Format0_Mode0", str_t, "160x120_yuv444", ""),
                  gen.const("Format0_Mode1", str_t, "320x240_yuv422", ""),
                  gen.const("Format0_Mode2", str_t, "640x480_yuv411", ""),
                  gen.const("Format0_Mode3", str_t, "640x480_yuv422", ""),
                  gen.const("Format0_Mode4", str_t, "640x480_rgb8", ""),
                  gen.const("Format0_Mode5", str_t, "640x480_mono8", ""),
                  gen.const("Format0_Mode6", str_t, "640x480_mono16", ""),
                  gen.const("Format1_Mode0", str_t, "800x600_yuv422", ""),
                  gen.const("Format1_Mode1", str_t, "800x600_rgb8", ""),
                  gen.const("Format1_Mode2", str_t, "800x600_mono8", ""),
                  gen.const("Format1_Mode6", str_t, "800x600_mono16", ""),
                  gen.const("Format1_Mode3", str_t, "1024x768_yuv422", ""),
                  gen.const("Format1_Mode4", str_t, "1024x768_rgb8", ""),
                  gen.const("Format1_Mode5", str_t, "1024x768_mono8", ""),
                  gen.const("Format1_Mode7", str_t, "1024x768_mono16", ""),
                  gen.const("Format2_Mode0", str_t, "1280x960_yuv422", ""),
                  gen.const("Format2_Mode1", str_t, "1280x960_rgb8", ""),
                  gen.const("Format2_Mode2", str_t, "1280x960_mono8", ""),
                  gen.const("Format2_Mode6", str_t, "1280x960_mono16", ""),
                  gen.const("Format2_Mode3", str_t, "1600x1200_yuv422", ""),
                  gen.const("Format2_Mode4", str_t, "1600x1200_rgb8", ""),
                  gen.const("Format2_Mode5", str_t, "1600x1200_mono8", ""),
                  gen.const("Format2_Mode7", str_t, "1600x1200_mono16", ""),
                  gen.const("Format7_Mode0", str_t, "format7_0", ""),
                  gen.const("Format7_Mode3", str_t, "format7_3", "")
                  ],
                 "Video mode for camera.")

gen.add("video_mode", str_t, SensorLevels.RECONFIGURE_CLOSE,
        "IIDC video mode.", "format7_3", edit_method = video_modes)

color_codings = gen.enum([gen.const("MONO8", str_t, "mono8", ""),
                  gen.const("MONO16", str_t, "mono16", ""),
                  gen.const("MONO16S", str_t, "mono16s", ""),
                  gen.const("RAW8", str_t, "raw8", ""),
                  gen.const("RAW16", str_t, "raw16", ""),
                  gen.const("RGB8", str_t, "rgb8", ""),
                  gen.const("RGB16", str_t, "rgb16", ""),
                  gen.const("RGB16S", str_t, "rgb16s", ""),
                  gen.const("YUV411", str_t, "yuv411", ""),
                  gen.const("YUV422", str_t, "yuv422", ""),
                  gen.const("YUV444", str_t, "yuv444", "")
                  ],
                 "Color coding (for format7 video modes only).")

gen.add("color_coding", str_t, SensorLevels.RECONFIGURE_CLOSE,
        "IIDC color coding for format7 video mode.", "raw16", edit_method = color_codings)

gen.add("roi_left", int_t, SensorLevels.RECONFIGURE_CLOSE,
        "horizontal origin of the ROI (for format7 video modes only).", 0, 0, 1600)

gen.add("roi_top", int_t, SensorLevels.RECONFIGURE_CLOSE,
        "vertical origin of the ROI (for format7 video modes only).", 0, 0, 1200)

gen.add("roi_width", int_t, SensorLevels.RECONFIGURE_CLOSE,
        "width of the ROI (for format7 video modes only).", 1024, 0, 1200)

gen.add("roi_height", int_t, SensorLevels.RECONFIGURE_CLOSE,
        "height of the ROI (for format7 video modes only).", 768, 0, 1600)

gen.add("frame_id", str_t, SensorLevels.RECONFIGURE_CLOSE,
        "ROS tf frame of reference, resolved with tf_prefix unless absolute.",
        "stereo_camera")

gen.add("frame_rate", double_t, SensorLevels.RECONFIGURE_CLOSE,
        "Camera speed (frames per second).", 15.0, 1.875, 240.0)

gen.add("iso_speed", int_t, SensorLevels.RECONFIGURE_CLOSE,
        "Total IEEE 1394 bus bandwidth (Megabits/second).", 400, 100, 3200)

gen.add("reset_on_open", bool_t, SensorLevels.RECONFIGURE_CLOSE,
        "Reset camera when opening the device.", True)

gen.add("camera_info_url_left", str_t, SensorLevels.RECONFIGURE_RUNNING,
        "Left camera calibration URL for this video_mode (uncalibrated if null).",
        "")

gen.add("camera_info_url_right", str_t, SensorLevels.RECONFIGURE_RUNNING,
        "Right camera calibration URL for this video_mode (uncalibrated if null).",
        "")


# Bayer color filter parameters
bayer_patterns = gen.enum([gen.const("none", str_t, "", "No Bayer encoding"),
                           gen.const("rggb", str_t, "rggb", ""),
                           gen.const("gbrg", str_t, "gbrg", ""),
                           gen.const("grbg", str_t, "grbg", ""),
                           gen.const("bggr", str_t, "bggr", "")],
                          "Bayer color encoding patterns")

gen.add("bayer_pattern", str_t, SensorLevels.RECONFIGURE_CLOSE,
        "Bayer color encoding pattern (default: none).", "",
        edit_method = bayer_patterns)

bayer_methods = gen.enum([gen.const("image_proc", str_t, "",
                              "Decode via ROS image_proc"),
                              gen.const("Nearest", str_t, "Nearest", ""),
                              gen.const("DownSample", str_t, "DownSample", ""),
                              gen.const("Simple", str_t, "Simple", ""),
                              #gen.const("Edge", str_t, "Edge", ""),
                              gen.const("Bilinear", str_t, "Bilinear", ""),
                              gen.const("HQ", str_t, "HQ", ""),
                              gen.const("VNG", str_t, "VNG", ""),
                              gen.const("AHD", str_t, "AHD", "")],
                             "Bayer method")

gen.add("bayer_method", str_t, SensorLevels.RECONFIGURE_CLOSE,
        "Bayer decoding method (default: ROS image_proc).",
        "", edit_method = bayer_methods)
        
# Stereo extract parameters
stereo_methods = gen.enum([gen.const("No_stereo", str_t, "","No stereo extraction"),
                    gen.const("Interlaced", str_t, "Interlaced", ""),
                    gen.const("Field", str_t, "Field", "")],
                   "Stereo method")
                   
gen.add("stereo_method", str_t, SensorLevels.RECONFIGURE_CLOSE,
        "Stereo extraction method (default: no extraction).",
        "", edit_method = stereo_methods)
        
# Generic IIDC feature control states, not all apply.
controls = gen.enum([gen.const("Off", int_t, 0, "Use fixed value"),
                     gen.const("Query", int_t, 1, "Query current values"),
                     gen.const("Auto", int_t, 2, "Camera sets continuously"),
                     gen.const("Manual", int_t, 3, "Use explicit value"),
                     gen.const("OnePush", int_t, 4, "Camera sets once"),
                     gen.const("None", int_t, 5, "Feature not available")],
                    "Feature control states")

gen.add("auto_brightness", int_t, SensorLevels.RECONFIGURE_RUNNING,
        "Brightness control state.", 1, 0, 4, edit_method = controls)

gen.add("brightness", double_t, SensorLevels.RECONFIGURE_RUNNING,
        "Black level offset.", 0., 0., 4095.)

gen.add("auto_exposure", int_t, SensorLevels.RECONFIGURE_RUNNING,
        "Combined Gain, Iris & Shutter control.",
        1, 0, 4, edit_method = controls)

gen.add("exposure", double_t, SensorLevels.RECONFIGURE_RUNNING,
        "Auto exposure value (like contrast).", 0., -10., 4095.)

gen.add("auto_gain", int_t, SensorLevels.RECONFIGURE_RUNNING,
        "Gain control state.", 1, 0, 4, edit_method = controls)

gen.add("gain", double_t, SensorLevels.RECONFIGURE_RUNNING,
        "Relative circuit gain.", 0., -10., 4095)

gen.add("auto_gamma", int_t, SensorLevels.RECONFIGURE_RUNNING,
        "Gamma control state.", 1, 0, 4, edit_method = controls)

gen.add("gamma", double_t, SensorLevels.RECONFIGURE_RUNNING,
        "Gamma expansion exponent.", 2.2, 0., 10.)

gen.add("auto_hue", int_t, SensorLevels.RECONFIGURE_RUNNING,
        "Hue control state.", 1, 0, 4, edit_method = controls)

gen.add("hue", double_t, SensorLevels.RECONFIGURE_RUNNING,
        "Color phase.", 0., 0., 4095.)

gen.add("auto_iris", int_t, SensorLevels.RECONFIGURE_RUNNING,
        "Iris control state.", 1, 0, 4, edit_method = controls)

gen.add("iris", double_t, SensorLevels.RECONFIGURE_RUNNING,
        "Iris control.", 8., 0., 4095.)

gen.add("auto_saturation", int_t, SensorLevels.RECONFIGURE_RUNNING,
        "Saturation control state.", 1, 0, 4, edit_method = controls)

gen.add("saturation", double_t, SensorLevels.RECONFIGURE_RUNNING,
        "Color saturation.", 1., 0., 4095.)

gen.add("auto_sharpness", int_t, SensorLevels.RECONFIGURE_RUNNING,
        "Sharpness control state.", 1, 0, 4, edit_method = controls)

gen.add("sharpness", double_t, SensorLevels.RECONFIGURE_RUNNING,
        "Image sharpness.", 1., 0., 4095.)

gen.add("auto_shutter", int_t, SensorLevels.RECONFIGURE_RUNNING,
        "Shutter control state.", 1, 0, 4, edit_method = controls)

gen.add("shutter", double_t, SensorLevels.RECONFIGURE_RUNNING,
        "Shutter speed.", 1., 0., 4095.)

gen.add("auto_pan", int_t, SensorLevels.RECONFIGURE_RUNNING,
        "PAN register control state.", 1, 0, 4, edit_method = controls)

gen.add("pan", double_t, SensorLevels.RECONFIGURE_RUNNING,
        "PAN control to witch camera output order", 0., 0., 4.)
        

# For bumblebee2 hicol cameras the absolute mode of these feature 
# does not seem to work (setting the feature mode to absolute mode and
# and changing the absolute value does not change the previous frame rate).
# However, the manual mode works, though the conversion form integer register
# values to real frame rates is strange (for sure it is not linear).
# From Coriander, the range and some interesting values are:
#       470 = 20.19874954 fps (max value)
#       480 = 20.00000000 fps (value for auto mode)
#       800 = 15.00000000 fps
#      1232 = 10.00000000 fps
#      1544 =  7.50000000 fps
#      1864 =  5.00000000 fps
#      2116 =  3.75000000 fps
#      2276 =  3.00000000 fps
#      2618 =  2.00000000 fps
#      2658 =  1.87500000 fps
#      3145 =  1.00000000 fps
#      4095 =  0.29112083 fps (min value)
gen.add("auto_frame_rate_feature", int_t, SensorLevels.RECONFIGURE_RUNNING,
        "Frame rate dc1394 feature state.", 1, 0, 4, edit_method = controls)
gen.add("frame_rate_feature", double_t, SensorLevels.RECONFIGURE_RUNNING,
        "Frame rate IIDC v1.31 feature", 480., 470., 4095.)

gen.add("auto_white_balance", int_t, SensorLevels.RECONFIGURE_RUNNING,
        "White balance control state.", 1, 0, 4, edit_method = controls)

gen.add("white_balance_BU", double_t, SensorLevels.RECONFIGURE_RUNNING,
        "Blue or U component of white balance.",
        0., 0., 4095.)

gen.add("white_balance_RV", double_t, SensorLevels.RECONFIGURE_RUNNING,
        "Red or V component of white balance.",
        0., 0., 4095.)


exit(gen.generate(PACKAGE, "Camera1394Stereo", "Camera1394Stereo"))
